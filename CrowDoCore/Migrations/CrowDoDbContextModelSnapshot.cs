// <auto-generated />
using System;
using CrowDoCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CrowDoCore.Migrations
{
    [DbContext(typeof(CrowDoDbContext))]
    partial class CrowDoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CrowDoCore.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName");

                    b.Property<int>("ProjectCategoriesID");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("CrowDoCore.Models.Comment", b =>
                {
                    b.Property<int>("ProjectId");

                    b.Property<int>("UserId");

                    b.Property<string>("CommentText");

                    b.Property<DateTime>("DateOfComment");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CrowDoCore.Models.PledgeOptions", b =>
                {
                    b.Property<int>("PledgeOptionsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<DateTime>("DurationOfPledge");

                    b.Property<DateTime>("EstimateDelivery");

                    b.Property<int>("NumberOfAvailablePledges");

                    b.Property<int>("NumberOfBacker");

                    b.Property<double>("PriceOfPlege");

                    b.Property<int>("ProjectId");

                    b.Property<string>("TitleOfPledge");

                    b.HasKey("PledgeOptionsId");

                    b.HasIndex("ProjectId");

                    b.ToTable("PledgeOptions");
                });

            modelBuilder.Entity("CrowDoCore.Models.Pledges", b =>
                {
                    b.Property<int>("PledgeOptionId");

                    b.Property<int>("UserId");

                    b.Property<int?>("PledgeOptionsId");

                    b.HasKey("PledgeOptionId", "UserId");

                    b.HasIndex("PledgeOptionsId");

                    b.HasIndex("UserId");

                    b.ToTable("Pledges");
                });

            modelBuilder.Entity("CrowDoCore.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<double>("PledgeOfFunding");

                    b.Property<double>("PledgeProgress");

                    b.Property<bool>("ProjectStatus");

                    b.Property<bool>("ProjectSuccess");

                    b.Property<int>("ProjectViews");

                    b.Property<int>("UserId");

                    b.HasKey("ProjectId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("CrowDoCore.Models.ProjectCategories", b =>
                {
                    b.Property<int>("ProjectId");

                    b.Property<int>("CategoryId");

                    b.HasKey("ProjectId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProjectCategories");
                });

            modelBuilder.Entity("CrowDoCore.Models.ProjectInfo", b =>
                {
                    b.Property<int>("ProjectInfoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("FileName");

                    b.Property<int>("ProjectId");

                    b.Property<string>("Title");

                    b.HasKey("ProjectInfoId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectInfo");
                });

            modelBuilder.Entity("CrowDoCore.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Country");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<string>("State");

                    b.Property<string>("Surname");

                    b.Property<string>("ZipCode");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CrowDoCore.Models.Comment", b =>
                {
                    b.HasOne("CrowDoCore.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrowDoCore.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrowDoCore.Models.PledgeOptions", b =>
                {
                    b.HasOne("CrowDoCore.Models.Project")
                        .WithMany("PledgeOptions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrowDoCore.Models.Pledges", b =>
                {
                    b.HasOne("CrowDoCore.Models.PledgeOptions", "PledgeOptions")
                        .WithMany()
                        .HasForeignKey("PledgeOptionsId");

                    b.HasOne("CrowDoCore.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrowDoCore.Models.ProjectCategories", b =>
                {
                    b.HasOne("CrowDoCore.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrowDoCore.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrowDoCore.Models.ProjectInfo", b =>
                {
                    b.HasOne("CrowDoCore.Models.Project")
                        .WithMany("ProjectInfo")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
